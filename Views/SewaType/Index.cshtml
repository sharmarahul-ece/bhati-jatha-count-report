@model IEnumerable<bhati_jatha_count_report.Models.Entities.SewaType>

@{
  ViewData["Title"] = "Manage Sewa Types";
}

<div class="container">
  <h2 class="mb-4">Manage Sewa Types</h2>

  <!-- Search and Filter Section -->
  <div class="row mb-3">
    <div class="col-md-8">
      <div class="input-group">
        <input type="text" id="searchInput" class="form-control" placeholder="Search sewa types...">
        <button class="btn btn-outline-secondary" type="button" onclick="applyFilters()">
          <i class="bi bi-search"></i> Search
        </button>
      </div>
    </div>
    <div class="col-md-4">
      <button type="button" class="btn btn-primary w-100" data-bs-toggle="modal" data-bs-target="#sewaTypeModal" onclick="resetForm()">
        <i class="bi bi-plus-circle"></i> Add Sewa Type
      </button>
    </div>
  </div>

  <!-- Sewa Types Table -->
  <div class="table-responsive">
    <table class="table table-striped table-hover">
      <thead class="table-light">
        <tr>
          <th onclick="toggleSort('name')" style="cursor: pointer">
            Sewa Name <i id="nameSort" class="bi"></i>
          </th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var sewaType in Model)
        {
          <tr>
            <td>@sewaType.SewaName</td>
            <td>
              <button class="btn btn-sm btn-primary me-2 edit-sewatype-btn" data-id="@sewaType.Id" data-name="@sewaType.SewaName">
                <i class="bi bi-pencil"></i> Edit
              </button>
              <button class="btn btn-sm btn-danger delete-sewatype-btn" data-id="@sewaType.Id" data-name="@sewaType.SewaName">
                <i class="bi bi-trash"></i> Delete
              </button>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>

  <!-- Sewa Type Modal -->
  <div class="modal fade" id="sewaTypeModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modalTitle">Add New Sewa Type</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="sewaTypeForm">
            <input type="hidden" id="sewaTypeId" />
            @Html.AntiForgeryToken()
            <div class="mb-3">
              <label for="sewaName" class="form-label">Sewa Name</label>
              <input type="text" class="form-control" id="sewaName" required>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" onclick="saveSewaType()">Save</button>
        </div>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  <script>
    let isEditing = false;
    let sewaTypes = @Json.Serialize(Model);
    let sortDirection = { name: 'asc' };
    let currentSort = 'name';

    function setupEventListeners() {
      // Event delegation for edit buttons
      document.querySelector('table').addEventListener('click', function (e) {
        if (e.target.closest('.edit-sewatype-btn')) {
          const button = e.target.closest('.edit-sewatype-btn');
          isEditing = true;
          document.getElementById('sewaTypeId').value = button.dataset.id;
          document.getElementById('sewaName').value = button.dataset.name;
          document.getElementById('modalTitle').textContent = 'Edit Sewa Type';
          new bootstrap.Modal(document.getElementById('sewaTypeModal')).show();
        }

        if (e.target.closest('.delete-sewatype-btn')) {
          const button = e.target.closest('.delete-sewatype-btn');
          const id = button.dataset.id;
          const name = button.dataset.name;
          deleteSewaType(id, name);
        }
      });
    }

    function resetForm() {
      isEditing = false;
      document.getElementById('sewaTypeForm').reset();
      document.getElementById('sewaTypeId').value = '';
      document.getElementById('modalTitle').textContent = 'Add New Sewa Type';
    }

    function deleteSewaType(id, name) {
      if (confirm(`Are you sure you want to delete the sewa type "${name}"?`)) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch(`/SewaType/Delete/${id}`, {
          method: 'DELETE',
          headers: {
            'RequestVerificationToken': token
          }
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              window.location.reload();
            } else {
              alert(data.message);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while deleting the sewa type');
          });
      }
    }

    function applyFilters() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      let filtered = [...sewaTypes];

      // Apply search
      if (searchTerm) {
        filtered = filtered.filter(s =>
          s.sewaName.toLowerCase().includes(searchTerm)
        );
      }

      // Apply sorting
      filtered.sort((a, b) => {
        const direction = sortDirection[currentSort] === 'asc' ? 1 : -1;
        return a.sewaName.localeCompare(b.sewaName) * direction;
      });

      updateTable(filtered);
    }

    function toggleSort(field) {
      if (currentSort === field) {
        sortDirection[field] = sortDirection[field] === 'asc' ? 'desc' : 'asc';
      } else {
        currentSort = field;
      }

      // Update sort icons
      document.getElementById('nameSort').className =
        `bi bi-arrow-${sortDirection.name === 'asc' ? 'up' : 'down'}`;

      applyFilters();
    }

    function updateTable(filtered) {
      const tbody = document.querySelector('table tbody');
      tbody.innerHTML = '';

      filtered.forEach(sewaType => {
        const row = document.createElement('tr');
        row.innerHTML = `
                      <td>${sewaType.sewaName}</td>
                      <td>
                          <button class="btn btn-sm btn-primary me-2 edit-sewatype-btn" 
                              data-id="${sewaType.id}"
                              data-name="${sewaType.sewaName}">
                              <i class="bi bi-pencil"></i> Edit
                          </button>
                          <button class="btn btn-sm btn-danger delete-sewatype-btn"
                              data-id="${sewaType.id}"
                              data-name="${sewaType.sewaName}">
                              <i class="bi bi-trash"></i> Delete
                          </button>
                      </td>
                  `;
        tbody.appendChild(row);
      });
    }

    function saveSewaType() {
      const sewaName = document.getElementById('sewaName').value;
      const sewaTypeId = document.getElementById('sewaTypeId').value;

      const sewaType = {
        sewaName: sewaName
      };

      if (isEditing) {
        sewaType.id = parseInt(sewaTypeId);
      }

      if (!sewaType.sewaName) {
        alert('Please fill in all required fields');
        return;
      }

      const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
      const method = isEditing ? 'PUT' : 'POST';
      const url = isEditing ? `/SewaType/Update/${sewaType.id}` : '/SewaType/Create';

      fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'RequestVerificationToken': token
        },
        body: JSON.stringify(sewaType)
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            window.location.reload();
          } else {
            alert(data.message);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while saving the sewa type');
        });
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
      setupEventListeners();
      toggleSort('name');
    });
  </script>
}