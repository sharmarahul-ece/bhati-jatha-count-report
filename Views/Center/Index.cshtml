@model IEnumerable<bhati_jatha_count_report.Models.Entities.Center>

@{
  ViewData["Title"] = "Manage Centers";
}

<div class="container">
  <h2 class="mb-4">Manage Centers</h2>

  <!-- Search and Filter Section -->
  <div class="row mb-3">
    <div class="col-md-4">
      <div class="input-group">
        <input type="text" id="searchInput" class="form-control" placeholder="Search centers...">
        <button class="btn btn-outline-secondary" type="button" onclick="applyFilters()">
          <i class="bi bi-search"></i> Search
        </button>
      </div>
    </div>
    <div class="col-md-3">
      <select id="typeFilter" class="form-select" onchange="applyFilters()">
        <option value="">All Types</option>
      </select>
    </div>
    <div class="col-md-3">
      <select id="sortBy" class="form-select" onchange="applyFilters()">
        <option value="name">Sort by Name</option>
        <option value="type">Sort by Type</option>
      </select>
    </div>
    <div class="col-md-2">
      <button type="button" class="btn btn-primary w-100" data-bs-toggle="modal" data-bs-target="#centerModal" onclick="resetForm()">
        <i class="bi bi-plus-circle"></i> Add Center
      </button>
    </div>
  </div>

  <!-- Centers Table -->
  <div class="table-responsive">
    <table class="table table-striped table-hover">
      <thead class="table-light">
        <tr>
          <th onclick="toggleSort('name')" style="cursor: pointer">
            Center Name <i id="nameSort" class="bi"></i>
          </th>
          <th onclick="toggleSort('type')" style="cursor: pointer">
            Center Type <i id="typeSort" class="bi"></i>
          </th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var center in Model)
        {
          <tr>
            <td>@center.CenterName</td>
            <td>@center.CenterType</td>
            <td>
              <button class="btn btn-sm btn-primary me-2 edit-center-btn" data-id="@center.Id" data-name="@center.CenterName" data-type="@center.CenterType">
                <i class="bi bi-pencil"></i> Edit
              </button>
              <button class="btn btn-sm btn-danger delete-center-btn" data-id="@center.Id" data-name="@center.CenterName">
                <i class="bi bi-trash"></i> Delete
              </button>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>

  <!-- Center Modal -->
  <div class="modal fade" id="centerModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modalTitle">Add New Center</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="centerForm">
            <input type="hidden" id="centerId" />
            @Html.AntiForgeryToken()
            <div class="mb-3">
              <label for="centerName" class="form-label">Center Name</label>
              <input type="text" class="form-control" id="centerName" required>
            </div>
            <div class="mb-3">
              <label for="centerType" class="form-label">Center Type</label>
              <input type="text" class="form-control" id="centerType" required>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" onclick="saveCenter()">Save</button>
        </div>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  <script>
    let isEditing = false;
    let centers = @Json.Serialize(Model);
    let sortDirection = { name: 'asc', type: 'asc' };
    let currentSort = 'name';

    function resetForm() {
      isEditing = false;
      document.getElementById('centerForm').reset();
      document.getElementById('centerId').value = '';
      document.getElementById('modalTitle').textContent = 'Add New Center';
    }

    function setupEventListeners() {
      // Event delegation for edit buttons
      document.querySelector('table').addEventListener('click', function (e) {
        if (e.target.closest('.edit-center-btn')) {
          const button = e.target.closest('.edit-center-btn');
          isEditing = true;
          document.getElementById('centerId').value = button.dataset.id;
          document.getElementById('centerName').value = button.dataset.name;
          document.getElementById('centerType').value = button.dataset.type;
          document.getElementById('modalTitle').textContent = 'Edit Center';
          new bootstrap.Modal(document.getElementById('centerModal')).show();
        }

        if (e.target.closest('.delete-center-btn')) {
          const button = e.target.closest('.delete-center-btn');
          const id = button.dataset.id;
          const name = button.dataset.name;
          deleteCenter(id, name);
        }
      });
    }

    function deleteCenter(id, name) {
      if (confirm(`Are you sure you want to delete the center "${name}"?`)) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        fetch(`/Center/Delete/${id}`, {
          method: 'DELETE',
          headers: {
            'RequestVerificationToken': token
          }
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              window.location.reload();
            } else {
              alert(data.message);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while deleting the center');
          });
      }
    }    // Initialize type filter dropdown
    function initializeTypeFilter() {
      const types = [...new Set(centers.map(c => c.centerType))];
      const typeFilter = document.getElementById('typeFilter');
      types.forEach(type => {
        const option = document.createElement('option');
        option.value = type;
        option.textContent = type;
        typeFilter.appendChild(option);
      });
    }

    // Apply filters and sorting
    function applyFilters() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const typeFilter = document.getElementById('typeFilter').value;
      let filtered = [...centers];

      // Apply search
      if (searchTerm) {
        filtered = filtered.filter(c =>
          c.centerName.toLowerCase().includes(searchTerm) ||
          c.centerType.toLowerCase().includes(searchTerm)
        );
      }

      // Apply type filter
      if (typeFilter) {
        filtered = filtered.filter(c => c.centerType === typeFilter);
      }

      // Apply sorting
      filtered.sort((a, b) => {
        const direction = sortDirection[currentSort] === 'asc' ? 1 : -1;
        const field = currentSort === 'name' ? 'centerName' : 'centerType';
        return a[field].localeCompare(b[field]) * direction;
      });

      updateTable(filtered);
    }

    // Toggle sort direction
    function toggleSort(field) {
      if (currentSort === field) {
        sortDirection[field] = sortDirection[field] === 'asc' ? 'desc' : 'asc';
      } else {
        currentSort = field;
      }

      // Update sort icons
      document.getElementById('nameSort').className =
        `bi bi-arrow-${currentSort === 'name' ? (sortDirection.name === 'asc' ? 'up' : 'down') : 'none'}`;
      document.getElementById('typeSort').className =
        `bi bi-arrow-${currentSort === 'type' ? (sortDirection.type === 'asc' ? 'up' : 'down') : 'none'}`;

      applyFilters();
    }

    // Update table contents
    function updateTable(filtered) {
      const tbody = document.querySelector('table tbody');
      tbody.innerHTML = '';

      filtered.forEach(center => {
        const row = document.createElement('tr');
        row.innerHTML = `
                        <td>${center.centerName}</td>
                        <td>${center.centerType}</td>
                        <td>
                          <button class="btn btn-sm btn-primary me-2 edit-center-btn" 
                              data-id="${center.id}"
                              data-name="${center.centerName}"
                              data-type="${center.centerType}">
                              <i class="bi bi-pencil"></i> Edit
                          </button>
                          <button class="btn btn-sm btn-danger delete-center-btn"
                              data-id="${center.id}"
                              data-name="${center.centerName}">
                              <i class="bi bi-trash"></i> Delete
                          </button>
                        </td>
                    `;
        tbody.appendChild(row);
      });
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
      initializeTypeFilter();
      toggleSort('name');
      setupEventListeners();
    }); function saveCenter() {
      const centerName = document.getElementById('centerName').value;
      const centerType = document.getElementById('centerType').value;
      const centerId = document.getElementById('centerId').value;

      const center = {
        centerName: centerName,
        centerType: centerType
      };

      if (isEditing) {
        center.id = parseInt(centerId);
      }

      if (!center.centerName || !center.centerType) {
        alert('Please fill in all required fields');
        return;
      }

      const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
      const method = isEditing ? 'PUT' : 'POST';
      const url = isEditing ? `/Center/Update/${center.id}` : '/Center/Create';

      fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'RequestVerificationToken': token
        },
        body: JSON.stringify(center)
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            window.location.reload();
          } else {
            alert(data.message);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while saving the center');
        });
    }
  </script>
}